{"ast":null,"code":"var _jsxFileName = \"/front/src/components/Statistic.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport \"../scss/components/statistic.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// '!' after 'ID' means not null\nconst STATISTIC_QUERY = gql`\n  query ($repositoryId: ID!, $fromYearMonth: String, $toYearMonth: String) {\n    statistic(\n      repositoryId: $repositoryId\n      fromYearMonth: $fromYearMonth\n      toYearMonth: $toYearMonth\n    ) {\n      year\n      month\n      userId\n      isOverall\n      totalMergeTime\n      averageMergeTime\n      mergedPrCount\n    }\n  }\n`;\nconst seconds_to_formated_time = seconds => {\n  const formated_time = new Date(seconds * 1000).toISOString().slice(11, 19);\n  // console.log(\"seconds_to_formated_time--formated_time:\", formated_time);\n  return formated_time;\n};\nexport const Statistic = ({\n  repoId\n}) => {\n  _s();\n  const [fromDateInput, setFromDateInput] = useState(\"202301\");\n  const [toDateInput, setToDateInput] = useState(\"202312\");\n  const handleDateInput = e => {\n    console.log(\"e.target.value\", e.target.value);\n    setFromDateInput(e.target.value);\n  };\n  console.log(\"fromDateInput\", fromDateInput);\n  // * unfinished, 'repoId: 1' for test\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(STATISTIC_QUERY, {\n    variables: {\n      repositoryId: repoId,\n      fromYearMonth: fromDateInput,\n      toYearMonth: toDateInput\n    }\n  });\n\n  // const [fetchData, { data, loading, error }] = useLazyQuery(STATISTIC_QUERY, {\n  //   // network-only: Fetches data directly from the network on every query, bypassing cache.\n  //   // Otherwise, it will not query the data the second time the button is clicked\n  //   fetchPolicy: \"network-only\",\n  // });\n\n  // Fetch data when the button is clicked\n  // const handleFetchClick = () => {\n  //   fetchData({\n  //     variables: {\n  //       repositoryId: repoId,\n  //       fromYearMonth: fromDateInput,\n  //       toYearMonth: toDateInput,\n  //     },\n  //   });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"statistic_component\",\n    children: [\"--Statistic---\", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"FromDate:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: fromDateInput,\n        onChange: e => handleDateInput(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), \"ToDate:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: toDateInput,\n        onChange: e => {\n          setToDateInput(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), data && data.statistic && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stat_list\",\n      children: data.statistic.map((stat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat_box \".concat(stat.isOverall ? \"is_overall\" : \"not_overall\"),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat_box_content\",\n          children: [stat.isOverall || /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"User:\", stat.userId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 36\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"mergedPrCount: \", stat.mergedPrCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"totalMergeTime:\", \" \", seconds_to_formated_time(stat.totalMergeTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"averageMergeTime:\", \" \", seconds_to_formated_time(stat.averageMergeTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(Statistic, \"woS9wHIO4czDUxzWrsW2PdJE8XU=\", false, function () {\n  return [useQuery];\n});\n_c = Statistic;\nvar _c;\n$RefreshReg$(_c, \"Statistic\");","map":{"version":3,"names":["React","useState","useQuery","gql","jsxDEV","_jsxDEV","STATISTIC_QUERY","seconds_to_formated_time","seconds","formated_time","Date","toISOString","slice","Statistic","repoId","_s","fromDateInput","setFromDateInput","toDateInput","setToDateInput","handleDateInput","e","console","log","target","value","data","loading","error","variables","repositoryId","fromYearMonth","toYearMonth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","type","onChange","statistic","map","stat","index","concat","isOverall","userId","mergedPrCount","totalMergeTime","averageMergeTime","_c","$RefreshReg$"],"sources":["/front/src/components/Statistic.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport moment from \"moment\";\n\nimport { useQuery, useLazyQuery, gql } from \"@apollo/client\";\nimport \"../scss/components/statistic.scss\";\n\ninterface Props {\n  repoId: number;\n}\n\n// '!' after 'ID' means not null\nconst STATISTIC_QUERY = gql`\n  query ($repositoryId: ID!, $fromYearMonth: String, $toYearMonth: String) {\n    statistic(\n      repositoryId: $repositoryId\n      fromYearMonth: $fromYearMonth\n      toYearMonth: $toYearMonth\n    ) {\n      year\n      month\n      userId\n      isOverall\n      totalMergeTime\n      averageMergeTime\n      mergedPrCount\n    }\n  }\n`;\n\nconst seconds_to_formated_time = (seconds: number) => {\n  const formated_time = new Date(seconds * 1000).toISOString().slice(11, 19);\n  // console.log(\"seconds_to_formated_time--formated_time:\", formated_time);\n  return formated_time;\n};\n\nexport const Statistic = ({ repoId }: Props) => {\n  const [fromDateInput, setFromDateInput] = useState<string>(\"202301\");\n  const [toDateInput, setToDateInput] = useState<string>(\"202312\");\n  const handleDateInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\"e.target.value\", e.target.value);\n    setFromDateInput(e.target.value);\n  };\n  console.log(\"fromDateInput\", fromDateInput);\n  // * unfinished, 'repoId: 1' for test\n  const { data, loading, error } = useQuery(STATISTIC_QUERY, {\n    variables: {\n      repositoryId: repoId,\n      fromYearMonth: fromDateInput,\n      toYearMonth: toDateInput,\n    },\n  });\n\n  // const [fetchData, { data, loading, error }] = useLazyQuery(STATISTIC_QUERY, {\n  //   // network-only: Fetches data directly from the network on every query, bypassing cache.\n  //   // Otherwise, it will not query the data the second time the button is clicked\n  //   fetchPolicy: \"network-only\",\n  // });\n\n  // Fetch data when the button is clicked\n  // const handleFetchClick = () => {\n  //   fetchData({\n  //     variables: {\n  //       repositoryId: repoId,\n  //       fromYearMonth: fromDateInput,\n  //       toYearMonth: toDateInput,\n  //     },\n  //   });\n  // };\n\n  return (\n    <div className=\"statistic_component\">\n      --Statistic---\n      {loading && <div>Loading...</div>}\n      {error && <div>Error: {error.message}</div>}\n      <div>\n        FromDate:\n        <input\n          type=\"text\"\n          value={fromDateInput}\n          onChange={(e) => handleDateInput(e)}\n        />\n        ToDate:\n        <input\n          type=\"text\"\n          value={toDateInput}\n          onChange={(e) => {\n            setToDateInput(e.target.value);\n          }}\n        />\n      </div>\n      {data && data.statistic && (\n        <div className=\"stat_list\">\n          {data.statistic.map((stat: any, index: number) => (\n            <div\n              key={index}\n              className={\"stat_box \".concat(\n                stat.isOverall ? \"is_overall\" : \"not_overall\"\n              )}\n            >\n              <div className=\"stat_box_content\">\n                {stat.isOverall || <div>User:{stat.userId}</div>}\n                <div>mergedPrCount: {stat.mergedPrCount}</div>\n                <div>\n                  totalMergeTime:{\" \"}\n                  {seconds_to_formated_time(stat.totalMergeTime)}\n                </div>\n                <div>\n                  averageMergeTime:{\" \"}\n                  {seconds_to_formated_time(stat.averageMergeTime)}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}