{"ast":null,"code":"var _jsxFileName = \"/front/src/components/Statistic.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useLazyQuery, gql } from \"@apollo/client\";\nimport \"../scss/components/statistic.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// '!' after 'ID' means not null\nconst STATISTIC_QUERY = gql`\n  query ($repositoryId: ID!, $fromYearMonth: String, $toYearMonth: String) {\n    statistic(\n      repositoryId: $repositoryId\n      fromYearMonth: $fromYearMonth\n      toYearMonth: $toYearMonth\n    ) {\n      year\n      month\n      userId\n      isOverall\n      totalMergeTime\n      averageMergeTime\n      mergedPrCount\n    }\n  }\n`;\nconst seconds_to_formated_time = seconds => {\n  const formated_time = new Date(seconds * 1000).toISOString().slice(11, 19);\n  // console.log(\"seconds_to_formated_time--formated_time:\", formated_time);\n  return formated_time;\n};\nexport const Statistic = ({\n  repoId\n}) => {\n  _s();\n  const [fromDateInput, setFromDateInput] = useState(\"202301\");\n  const [toDateInput, setToDateInput] = useState(\"202312\");\n  const handleDateInput = e => {\n    console.log(\"e.target.value\", e.target.value);\n    setFromDateInput(e.target.value);\n  };\n  console.log(\"fromDateInput\", fromDateInput);\n  // * unfinished, 'repoId: 1' for test\n  // const { data, loading, error } = useQuery(STATISTIC_QUERY, {\n  //   variables: {\n  //     repositoryId: repoId,\n  //     fromYearMonth: fromDateInput,\n  //     toYearMonth: toDateInput,\n  //   },\n  // });\n\n  const [fetchData, {\n    data,\n    loading,\n    error\n  }] = useLazyQuery(STATISTIC_QUERY, {\n    variables: {\n      repositoryId: repoId,\n      fromYearMonth: fromDateInput,\n      toYearMonth: toDateInput\n    }\n  });\n  const handleFetchClick = () => {\n    fetchData({\n      variables: {\n        owner,\n        repoName\n      }\n    }); // <-- Fetch data when the button is clicked\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"statistic_component\",\n    children: [\"--Statistic---\", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"FromDate:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: fromDateInput,\n        onChange: e => handleDateInput(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), \"ToDate:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: toDateInput,\n        onChange: e => {\n          setToDateInput(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), data && data.statistic && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stat_list\",\n      children: data.statistic.map((stat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat_box \".concat(stat.isOverall ? \"is_overall\" : \"not_overall\"),\n        children: [stat.isOverall || /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"User:\", stat.userId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"mergedPrCount: \", stat.mergedPrCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"totalMergeTime: \", seconds_to_formated_time(stat.totalMergeTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"averageMergeTime:\", \" \", seconds_to_formated_time(stat.averageMergeTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Statistic, \"nJZ274EYKPUaHflrTEezE07+agE=\", false, function () {\n  return [useLazyQuery];\n});\n_c = Statistic;\nvar _c;\n$RefreshReg$(_c, \"Statistic\");","map":{"version":3,"names":["React","useState","useLazyQuery","gql","jsxDEV","_jsxDEV","STATISTIC_QUERY","seconds_to_formated_time","seconds","formated_time","Date","toISOString","slice","Statistic","repoId","_s","fromDateInput","setFromDateInput","toDateInput","setToDateInput","handleDateInput","e","console","log","target","value","fetchData","data","loading","error","variables","repositoryId","fromYearMonth","toYearMonth","handleFetchClick","owner","repoName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","type","onChange","statistic","map","stat","index","concat","isOverall","userId","mergedPrCount","totalMergeTime","averageMergeTime","_c","$RefreshReg$"],"sources":["/front/src/components/Statistic.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport moment from \"moment\";\n\nimport { useQuery, useLazyQuery, gql } from \"@apollo/client\";\nimport \"../scss/components/statistic.scss\";\n\ninterface Props {\n  repoId: number;\n}\n\n// '!' after 'ID' means not null\nconst STATISTIC_QUERY = gql`\n  query ($repositoryId: ID!, $fromYearMonth: String, $toYearMonth: String) {\n    statistic(\n      repositoryId: $repositoryId\n      fromYearMonth: $fromYearMonth\n      toYearMonth: $toYearMonth\n    ) {\n      year\n      month\n      userId\n      isOverall\n      totalMergeTime\n      averageMergeTime\n      mergedPrCount\n    }\n  }\n`;\n\nconst seconds_to_formated_time = (seconds: number) => {\n  const formated_time = new Date(seconds * 1000).toISOString().slice(11, 19);\n  // console.log(\"seconds_to_formated_time--formated_time:\", formated_time);\n  return formated_time;\n};\n\nexport const Statistic = ({ repoId }: Props) => {\n  const [fromDateInput, setFromDateInput] = useState<string>(\"202301\");\n  const [toDateInput, setToDateInput] = useState<string>(\"202312\");\n  const handleDateInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\"e.target.value\", e.target.value);\n    setFromDateInput(e.target.value);\n  };\n  console.log(\"fromDateInput\", fromDateInput);\n  // * unfinished, 'repoId: 1' for test\n  // const { data, loading, error } = useQuery(STATISTIC_QUERY, {\n  //   variables: {\n  //     repositoryId: repoId,\n  //     fromYearMonth: fromDateInput,\n  //     toYearMonth: toDateInput,\n  //   },\n  // });\n\n  const [fetchData, { data, loading, error }] = useLazyQuery(STATISTIC_QUERY, {\n    variables: {\n      repositoryId: repoId,\n      fromYearMonth: fromDateInput,\n      toYearMonth: toDateInput,\n    },\n  });\n  const handleFetchClick = () => {\n    fetchData({ variables: { owner, repoName } }); // <-- Fetch data when the button is clicked\n  };\n\n  return (\n    <div className=\"statistic_component\">\n      --Statistic---\n      {loading && <div>Loading...</div>}\n      {error && <div>Error: {error.message}</div>}\n      <div>\n        FromDate:\n        <input\n          type=\"text\"\n          value={fromDateInput}\n          onChange={(e) => handleDateInput(e)}\n        />\n        ToDate:\n        <input\n          type=\"text\"\n          value={toDateInput}\n          onChange={(e) => {\n            setToDateInput(e.target.value);\n          }}\n        />\n      </div>\n      {data && data.statistic && (\n        <div className=\"stat_list\">\n          {data.statistic.map((stat: any, index: number) => (\n            <div\n              key={index}\n              className={\"stat_box \".concat(\n                stat.isOverall ? \"is_overall\" : \"not_overall\"\n              )}\n            >\n              {stat.isOverall || <div>User:{stat.userId}</div>}\n              <div>mergedPrCount: {stat.mergedPrCount}</div>\n              <div>\n                totalMergeTime: {seconds_to_formated_time(stat.totalMergeTime)}\n              </div>\n              <div>\n                averageMergeTime:{\" \"}\n                {seconds_to_formated_time(stat.averageMergeTime)}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}