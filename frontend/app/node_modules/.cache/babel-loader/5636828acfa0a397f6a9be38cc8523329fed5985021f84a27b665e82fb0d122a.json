{"ast":null,"code":"var _jsxFileName = \"/front/src/components/Statistic.tsx\",\n  _s = $RefreshSig$();\nimport { useQuery, gql } from \"@apollo/client\";\nimport \"../scss/components/statistic.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// '!' after 'ID' means not null\nconst STATISTIC_QUERY = gql`\n  query ($repositoryId: ID!, $fromYearMonth: Int, $toYearMonth: Int) {\n    statistic(\n      repositoryId: $repositoryId\n      fromYearMonth: $fromYearMonth\n      toYearMonth: $toYearMonth\n    ) {\n      id\n      year\n      month\n      userId\n      isOverall\n      totalMergeTime\n      averageMergeTime\n      mergedPrCount\n    }\n  }\n`;\nconst seconds_to_formated_time = seconds => {\n  const formated_time = new Date(seconds * 1000).toISOString().slice(11, 19);\n  // console.log(\"seconds_to_formated_time--formated_time:\", formated_time);\n  return formated_time;\n};\nexport const Statistic = ({\n  repoId,\n  fromYearMonth,\n  toYearMonth\n}) => {\n  _s();\n  // * unfinished, 'repoId: 1' for test\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(STATISTIC_QUERY, {\n    variables: {\n      repoId: 1,\n      fromYearMonth: 9,\n      toYearMonth: 9\n    }\n  });\n  console.log(\"Statistic--props:\", repoId, fromYearMonth, toYearMonth);\n  console.log(\"Statistic--Data:\", data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"statistic_component\",\n    children: [\"--Statistic---\", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this), data && data.statistic && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stat_list\",\n      children: data.statistic.map(stat => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat_box \".concat(stat.isOverall ? \"is_overall\" : \"not_overall\"),\n        children: [stat.isOverall || /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"User:\", stat.userId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Year: \", stat.year]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"month: \", stat.month]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"mergedPrCount: \", stat.mergedPrCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"totalMergeTime: \", seconds_to_formated_time(stat.totalMergeTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"averageMergeTime:\", \" \", seconds_to_formated_time(stat.averageMergeTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this)]\n      }, stat.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Statistic, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n_c = Statistic;\nvar _c;\n$RefreshReg$(_c, \"Statistic\");","map":{"version":3,"names":["useQuery","gql","jsxDEV","_jsxDEV","STATISTIC_QUERY","seconds_to_formated_time","seconds","formated_time","Date","toISOString","slice","Statistic","repoId","fromYearMonth","toYearMonth","_s","data","loading","error","variables","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","statistic","map","stat","concat","isOverall","userId","year","month","mergedPrCount","totalMergeTime","averageMergeTime","id","_c","$RefreshReg$"],"sources":["/front/src/components/Statistic.tsx"],"sourcesContent":["import moment from \"moment\";\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport \"../scss/components/statistic.scss\";\n\ninterface Props {\n  repoId: number;\n  fromYearMonth: number;\n  toYearMonth: number;\n}\n\n// '!' after 'ID' means not null\nconst STATISTIC_QUERY = gql`\n  query ($repositoryId: ID!, $fromYearMonth: Int, $toYearMonth: Int) {\n    statistic(\n      repositoryId: $repositoryId\n      fromYearMonth: $fromYearMonth\n      toYearMonth: $toYearMonth\n    ) {\n      id\n      year\n      month\n      userId\n      isOverall\n      totalMergeTime\n      averageMergeTime\n      mergedPrCount\n    }\n  }\n`;\n\nconst seconds_to_formated_time = (seconds: number) => {\n  const formated_time = new Date(seconds * 1000).toISOString().slice(11, 19);\n  // console.log(\"seconds_to_formated_time--formated_time:\", formated_time);\n  return formated_time;\n};\n\nexport const Statistic = ({ repoId, fromYearMonth, toYearMonth }: Props) => {\n  // * unfinished, 'repoId: 1' for test\n  const { data, loading, error } = useQuery(STATISTIC_QUERY, {\n    variables: { repoId: 1, fromYearMonth: 9, toYearMonth: 9 },\n  });\n\n  console.log(\"Statistic--props:\", repoId, fromYearMonth, toYearMonth);\n  console.log(\"Statistic--Data:\", data);\n\n  return (\n    <div className=\"statistic_component\">\n      --Statistic---\n      {loading && <div>Loading...</div>}\n      {error && <div>Error: {error.message}</div>}\n      {data && data.statistic && (\n        <div className=\"stat_list\">\n          {data.statistic.map((stat: any) => (\n            <div\n              key={stat.id}\n              className={\"stat_box \".concat(\n                stat.isOverall ? \"is_overall\" : \"not_overall\"\n              )}\n            >\n              {stat.isOverall || <div>User:{stat.userId}</div>}\n              <div>Year: {stat.year}</div>\n              <div>month: {stat.month}</div>\n              <div>mergedPrCount: {stat.mergedPrCount}</div>\n              <div>\n                totalMergeTime: {seconds_to_formated_time(stat.totalMergeTime)}\n              </div>\n              <div>\n                averageMergeTime:{\" \"}\n                {seconds_to_formated_time(stat.averageMergeTime)}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}